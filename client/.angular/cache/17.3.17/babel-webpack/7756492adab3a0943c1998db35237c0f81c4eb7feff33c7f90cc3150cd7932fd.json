{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nexport class AuthService {\n  constructor(router) {\n    this.router = router;\n    this.SESSION_KEY = 'app:session';\n    this.USERS_KEY = 'app:users';\n    this.initializeData();\n  }\n  initializeData() {\n    // Seed data on first run\n    const existingUsers = localStorage.getItem(this.USERS_KEY);\n    if (!existingUsers) {\n      const seedUsers = [{\n        id: '1',\n        username: 'super',\n        password: '123',\n        email: 'super@admin.com',\n        roles: ['super'],\n        groups: []\n      }];\n      localStorage.setItem(this.USERS_KEY, JSON.stringify(seedUsers));\n      localStorage.setItem('app:groups', JSON.stringify([]));\n      localStorage.setItem('app:channels', JSON.stringify([]));\n    }\n  }\n  login(username, password) {\n    const users = JSON.parse(localStorage.getItem(this.USERS_KEY) || '[]');\n    const user = users.find(u => u.username === username && u.password === password);\n    if (user) {\n      const session = {\n        userId: user.id,\n        username: user.username,\n        roles: user.roles,\n        loginTime: new Date().toISOString()\n      };\n      localStorage.setItem(this.SESSION_KEY, JSON.stringify(session));\n      return {\n        success: true,\n        user\n      };\n    }\n    return {\n      success: false,\n      error: 'Invalid username or password'\n    };\n  }\n  register(username, password, email) {\n    const users = JSON.parse(localStorage.getItem(this.USERS_KEY) || '[]');\n    // Check for duplicate username\n    if (users.find(u => u.username === username)) {\n      return {\n        success: false,\n        error: 'Username already exists'\n      };\n    }\n    const newUser = {\n      id: Date.now().toString(),\n      username,\n      password,\n      email,\n      roles: ['user'],\n      groups: []\n    };\n    users.push(newUser);\n    localStorage.setItem(this.USERS_KEY, JSON.stringify(users));\n    return {\n      success: true,\n      user: newUser\n    };\n  }\n  logout() {\n    localStorage.removeItem(this.SESSION_KEY);\n    this.router.navigate(['/login']);\n  }\n  isLoggedIn() {\n    return !!localStorage.getItem(this.SESSION_KEY);\n  }\n  getCurrentUser() {\n    const session = localStorage.getItem(this.SESSION_KEY);\n    if (!session) return null;\n    const sessionData = JSON.parse(session);\n    const users = JSON.parse(localStorage.getItem(this.USERS_KEY) || '[]');\n    return users.find(u => u.id === sessionData.userId) || null;\n  }\n  getCurrentSession() {\n    const session = localStorage.getItem(this.SESSION_KEY);\n    return session ? JSON.parse(session) : null;\n  }\n  hasRole(role) {\n    const session = this.getCurrentSession();\n    return session ? session.roles.includes(role) : false;\n  }\n  isSuperAdmin() {\n    return this.hasRole('super');\n  }\n  isGroupAdmin() {\n    return this.hasRole('groupAdmin');\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.Router));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["AuthService","constructor","router","SESSION_KEY","USERS_KEY","initializeData","existingUsers","localStorage","getItem","seedUsers","id","username","password","email","roles","groups","setItem","JSON","stringify","login","users","parse","user","find","u","session","userId","loginTime","Date","toISOString","success","error","register","newUser","now","toString","push","logout","removeItem","navigate","isLoggedIn","getCurrentUser","sessionData","getCurrentSession","hasRole","role","includes","isSuperAdmin","isGroupAdmin","i0","ɵɵinject","i1","Router","factory","ɵfac","providedIn"],"sources":["/Users/keyaanhammadi/Desktop/SoftwareFrameworksA1/client/src/app/services/auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { User, Role } from '../models';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private readonly SESSION_KEY = 'app:session';\n  private readonly USERS_KEY = 'app:users';\n\n  constructor(private router: Router) {\n    this.initializeData();\n  }\n\n  private initializeData(): void {\n    // Seed data on first run\n    const existingUsers = localStorage.getItem(this.USERS_KEY);\n    if (!existingUsers) {\n      const seedUsers: User[] = [\n        {\n          id: '1',\n          username: 'super',\n          password: '123',\n          email: 'super@admin.com',\n          roles: ['super'],\n          groups: []\n        }\n      ];\n      localStorage.setItem(this.USERS_KEY, JSON.stringify(seedUsers));\n      localStorage.setItem('app:groups', JSON.stringify([]));\n      localStorage.setItem('app:channels', JSON.stringify([]));\n    }\n  }\n\n  login(username: string, password: string): { success: boolean; user?: User; error?: string } {\n    const users: User[] = JSON.parse(localStorage.getItem(this.USERS_KEY) || '[]');\n    const user = users.find(u => u.username === username && u.password === password);\n    \n    if (user) {\n      const session = {\n        userId: user.id,\n        username: user.username,\n        roles: user.roles,\n        loginTime: new Date().toISOString()\n      };\n      localStorage.setItem(this.SESSION_KEY, JSON.stringify(session));\n      return { success: true, user };\n    }\n    \n    return { success: false, error: 'Invalid username or password' };\n  }\n\n  register(username: string, password: string, email?: string): { success: boolean; user?: User; error?: string } {\n    const users: User[] = JSON.parse(localStorage.getItem(this.USERS_KEY) || '[]');\n    \n    // Check for duplicate username\n    if (users.find(u => u.username === username)) {\n      return { success: false, error: 'Username already exists' };\n    }\n\n    const newUser: User = {\n      id: Date.now().toString(),\n      username,\n      password,\n      email,\n      roles: ['user'],\n      groups: []\n    };\n\n    users.push(newUser);\n    localStorage.setItem(this.USERS_KEY, JSON.stringify(users));\n    \n    return { success: true, user: newUser };\n  }\n\n  logout(): void {\n    localStorage.removeItem(this.SESSION_KEY);\n    this.router.navigate(['/login']);\n  }\n\n  isLoggedIn(): boolean {\n    return !!localStorage.getItem(this.SESSION_KEY);\n  }\n\n  getCurrentUser(): User | null {\n    const session = localStorage.getItem(this.SESSION_KEY);\n    if (!session) return null;\n\n    const sessionData = JSON.parse(session);\n    const users: User[] = JSON.parse(localStorage.getItem(this.USERS_KEY) || '[]');\n    return users.find(u => u.id === sessionData.userId) || null;\n  }\n\n  getCurrentSession(): any {\n    const session = localStorage.getItem(this.SESSION_KEY);\n    return session ? JSON.parse(session) : null;\n  }\n\n  hasRole(role: Role): boolean {\n    const session = this.getCurrentSession();\n    return session ? session.roles.includes(role) : false;\n  }\n\n  isSuperAdmin(): boolean {\n    return this.hasRole('super');\n  }\n\n  isGroupAdmin(): boolean {\n    return this.hasRole('groupAdmin');\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}