{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(router) {\n      this.router = router;\n      this.SESSION_KEY = 'app:session';\n      this.USERS_KEY = 'app:users';\n      this.initializeData();\n    }\n    initializeData() {\n      // Seed data on first run\n      const existingUsers = localStorage.getItem(this.USERS_KEY);\n      if (!existingUsers) {\n        const seedUsers = [{\n          id: '1',\n          username: 'super',\n          password: '123',\n          email: 'super@admin.com',\n          roles: ['super'],\n          groups: []\n        }];\n        localStorage.setItem(this.USERS_KEY, JSON.stringify(seedUsers));\n        localStorage.setItem('app:groups', JSON.stringify([]));\n        localStorage.setItem('app:channels', JSON.stringify([]));\n      }\n    }\n    login(username, password) {\n      const users = JSON.parse(localStorage.getItem(this.USERS_KEY) || '[]');\n      const user = users.find(u => u.username === username && u.password === password);\n      if (user) {\n        const session = {\n          userId: user.id,\n          username: user.username,\n          roles: user.roles,\n          loginTime: new Date().toISOString()\n        };\n        localStorage.setItem(this.SESSION_KEY, JSON.stringify(session));\n        return {\n          success: true,\n          user\n        };\n      }\n      return {\n        success: false,\n        error: 'Invalid username or password'\n      };\n    }\n    register(username, password, email) {\n      const users = JSON.parse(localStorage.getItem(this.USERS_KEY) || '[]');\n      // Check for duplicate username\n      if (users.find(u => u.username === username)) {\n        return {\n          success: false,\n          error: 'Username already exists'\n        };\n      }\n      const newUser = {\n        id: Date.now().toString(),\n        username,\n        password,\n        email,\n        roles: ['user'],\n        groups: []\n      };\n      users.push(newUser);\n      localStorage.setItem(this.USERS_KEY, JSON.stringify(users));\n      return {\n        success: true,\n        user: newUser\n      };\n    }\n    logout() {\n      localStorage.removeItem(this.SESSION_KEY);\n      this.router.navigate(['/login']);\n    }\n    isLoggedIn() {\n      return !!localStorage.getItem(this.SESSION_KEY);\n    }\n    getCurrentUser() {\n      const session = localStorage.getItem(this.SESSION_KEY);\n      if (!session) return null;\n      const sessionData = JSON.parse(session);\n      const users = JSON.parse(localStorage.getItem(this.USERS_KEY) || '[]');\n      return users.find(u => u.id === sessionData.userId) || null;\n    }\n    getCurrentSession() {\n      const session = localStorage.getItem(this.SESSION_KEY);\n      return session ? JSON.parse(session) : null;\n    }\n    hasRole(role) {\n      const session = this.getCurrentSession();\n      return session ? session.roles.includes(role) : false;\n    }\n    isSuperAdmin() {\n      return this.hasRole('super');\n    }\n    isGroupAdmin() {\n      return this.hasRole('groupAdmin');\n    }\n    static {\n      this.ɵfac = function AuthService_Factory(t) {\n        return new (t || AuthService)(i0.ɵɵinject(i1.Router));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: AuthService,\n        factory: AuthService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}