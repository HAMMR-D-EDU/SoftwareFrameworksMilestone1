{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./storage.service\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(store) {\n      this.store = store;\n      this.USERS_KEY = 'app:users';\n      this.SESSION_KEY = 'app:session';\n      // seed on first run\n      const users = this.store.get(this.USERS_KEY, []);\n      if (users.length === 0) {\n        this.store.set(this.USERS_KEY, [{\n          id: 'u_1',\n          username: 'super',\n          password: '123',\n          email: '',\n          roles: ['super'],\n          groups: []\n        }]);\n        this.store.set('app:groups', []);\n        this.store.set('app:channels', []);\n      }\n    }\n    currentUser() {\n      return this.store.get(this.SESSION_KEY, null);\n    }\n    login(username, password) {\n      const users = this.store.get(this.USERS_KEY, []);\n      const found = users.find(u => u.username === username && u.password === password);\n      if (found) {\n        this.store.set(this.SESSION_KEY, found);\n        return true;\n      }\n      return false;\n    }\n    register(newUser) {\n      const users = this.store.get(this.USERS_KEY, []);\n      if (users.some(u => u.username === newUser.username)) {\n        return {\n          ok: false,\n          msg: 'Username already exists'\n        };\n      }\n      const id = `u_${users.length + 1}`;\n      users.push({\n        id,\n        username: newUser.username,\n        password: newUser.password,\n        email: newUser.email ?? '',\n        roles: ['user'],\n        groups: []\n      });\n      this.store.set(this.USERS_KEY, users);\n      return {\n        ok: true\n      };\n      // (No auto-login; navigate to /login after success)\n    }\n    logout() {\n      this.store.remove(this.SESSION_KEY);\n    }\n    static {\n      this.ɵfac = function AuthService_Factory(t) {\n        return new (t || AuthService)(i0.ɵɵinject(i1.StorageService));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: AuthService,\n        factory: AuthService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}