{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class DataService {\n  constructor() {\n    this.USERS_KEY = 'app:users';\n    this.GROUPS_KEY = 'app:groups';\n    this.CHANNELS_KEY = 'app:channels';\n  }\n  // User management\n  getAllUsers() {\n    return JSON.parse(localStorage.getItem(this.USERS_KEY) || '[]');\n  }\n  getUserById(id) {\n    const users = this.getAllUsers();\n    return users.find(u => u.id === id) || null;\n  }\n  updateUser(user) {\n    const users = this.getAllUsers();\n    const index = users.findIndex(u => u.id === user.id);\n    if (index !== -1) {\n      users[index] = user;\n      localStorage.setItem(this.USERS_KEY, JSON.stringify(users));\n    }\n  }\n  deleteUser(userId) {\n    const users = this.getAllUsers();\n    const groups = this.getAllGroups();\n    const channels = this.getAllChannels();\n    // Remove user from all groups\n    groups.forEach(group => {\n      group.memberUserIds = group.memberUserIds.filter(id => id !== userId);\n      group.adminUserIds = group.adminUserIds.filter(id => id !== userId);\n    });\n    // Remove user from all channels (banned list)\n    channels.forEach(channel => {\n      channel.bannedUserIds = channel.bannedUserIds.filter(id => id !== userId);\n    });\n    // Remove user\n    const updatedUsers = users.filter(u => u.id !== userId);\n    localStorage.setItem(this.USERS_KEY, JSON.stringify(updatedUsers));\n    localStorage.setItem(this.GROUPS_KEY, JSON.stringify(groups));\n    localStorage.setItem(this.CHANNELS_KEY, JSON.stringify(channels));\n    return {\n      success: true\n    };\n  }\n  promoteUserToGroupAdmin(userId, groupId) {\n    const user = this.getUserById(userId);\n    const group = this.getGroupById(groupId);\n    if (!user) return {\n      success: false,\n      error: 'User not found'\n    };\n    if (!group) return {\n      success: false,\n      error: 'Group not found'\n    };\n    // Add groupAdmin role if not already present\n    if (!user.roles.includes('groupAdmin')) {\n      user.roles.push('groupAdmin');\n    }\n    // Add to group admins if not already\n    if (!group.adminUserIds.includes(userId)) {\n      group.adminUserIds.push(userId);\n    }\n    // Add to user's groups if not already\n    if (!user.groups.includes(groupId)) {\n      user.groups.push(groupId);\n    }\n    this.updateUser(user);\n    this.updateGroup(group);\n    return {\n      success: true\n    };\n  }\n  // Group management\n  getAllGroups() {\n    return JSON.parse(localStorage.getItem(this.GROUPS_KEY) || '[]');\n  }\n  getGroupById(id) {\n    const groups = this.getAllGroups();\n    return groups.find(g => g.id === id) || null;\n  }\n  getGroupsForUser(userId) {\n    const groups = this.getAllGroups();\n    return groups.filter(g => g.memberUserIds.includes(userId));\n  }\n  createGroup(name, ownerUserId) {\n    const groups = this.getAllGroups();\n    // Check for duplicate name\n    if (groups.find(g => g.name === name)) {\n      return {\n        success: false,\n        error: 'Group name already exists'\n      };\n    }\n    const newGroup = {\n      id: Date.now().toString(),\n      name,\n      ownerUserId,\n      adminUserIds: [ownerUserId],\n      memberUserIds: [ownerUserId],\n      channelIds: []\n    };\n    groups.push(newGroup);\n    localStorage.setItem(this.GROUPS_KEY, JSON.stringify(groups));\n    // Add group to user's groups\n    const user = this.getUserById(ownerUserId);\n    if (user) {\n      user.groups.push(newGroup.id);\n      this.updateUser(user);\n    }\n    return {\n      success: true,\n      group: newGroup\n    };\n  }\n  updateGroup(group) {\n    const groups = this.getAllGroups();\n    const index = groups.findIndex(g => g.id === group.id);\n    if (index !== -1) {\n      groups[index] = group;\n      localStorage.setItem(this.GROUPS_KEY, JSON.stringify(groups));\n    }\n  }\n  addMemberToGroup(groupId, userId) {\n    const group = this.getGroupById(groupId);\n    const user = this.getUserById(userId);\n    if (!group) return {\n      success: false,\n      error: 'Group not found'\n    };\n    if (!user) return {\n      success: false,\n      error: 'User not found'\n    };\n    if (group.memberUserIds.includes(userId)) {\n      return {\n        success: false,\n        error: 'User is already a member'\n      };\n    }\n    group.memberUserIds.push(userId);\n    user.groups.push(groupId);\n    this.updateGroup(group);\n    this.updateUser(user);\n    return {\n      success: true\n    };\n  }\n  removeMemberFromGroup(groupId, userId) {\n    const group = this.getGroupById(groupId);\n    const user = this.getUserById(userId);\n    if (!group) return {\n      success: false,\n      error: 'Group not found'\n    };\n    if (!user) return {\n      success: false,\n      error: 'User not found'\n    };\n    group.memberUserIds = group.memberUserIds.filter(id => id !== userId);\n    group.adminUserIds = group.adminUserIds.filter(id => id !== userId);\n    user.groups = user.groups.filter(id => id !== groupId);\n    this.updateGroup(group);\n    this.updateUser(user);\n    return {\n      success: true\n    };\n  }\n  // Channel management\n  getAllChannels() {\n    return JSON.parse(localStorage.getItem(this.CHANNELS_KEY) || '[]');\n  }\n  getChannelById(id) {\n    const channels = this.getAllChannels();\n    return channels.find(c => c.id === id) || null;\n  }\n  getChannelsForGroup(groupId) {\n    const channels = this.getAllChannels();\n    return channels.filter(c => c.groupId === groupId);\n  }\n  createChannel(groupId, name) {\n    const channels = this.getAllChannels();\n    const group = this.getGroupById(groupId);\n    if (!group) return {\n      success: false,\n      error: 'Group not found'\n    };\n    // Check for duplicate name within the group\n    const existingChannel = channels.find(c => c.groupId === groupId && c.name === name);\n    if (existingChannel) {\n      return {\n        success: false,\n        error: 'Channel name already exists in this group'\n      };\n    }\n    const newChannel = {\n      id: Date.now().toString(),\n      groupId,\n      name,\n      bannedUserIds: []\n    };\n    channels.push(newChannel);\n    group.channelIds.push(newChannel.id);\n    localStorage.setItem(this.CHANNELS_KEY, JSON.stringify(channels));\n    this.updateGroup(group);\n    return {\n      success: true,\n      channel: newChannel\n    };\n  }\n  banUserFromChannel(channelId, userId) {\n    const channel = this.getChannelById(channelId);\n    if (!channel) return {\n      success: false,\n      error: 'Channel not found'\n    };\n    if (channel.bannedUserIds.includes(userId)) {\n      return {\n        success: false,\n        error: 'User is already banned from this channel'\n      };\n    }\n    channel.bannedUserIds.push(userId);\n    const channels = this.getAllChannels();\n    const index = channels.findIndex(c => c.id === channelId);\n    if (index !== -1) {\n      channels[index] = channel;\n      localStorage.setItem(this.CHANNELS_KEY, JSON.stringify(channels));\n    }\n    return {\n      success: true\n    };\n  }\n  isUserBannedFromChannel(channelId, userId) {\n    const channel = this.getChannelById(channelId);\n    return channel ? channel.bannedUserIds.includes(userId) : false;\n  }\n  static {\n    this.ɵfac = function DataService_Factory(t) {\n      return new (t || DataService)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: DataService,\n      factory: DataService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["DataService","constructor","USERS_KEY","GROUPS_KEY","CHANNELS_KEY","getAllUsers","JSON","parse","localStorage","getItem","getUserById","id","users","find","u","updateUser","user","index","findIndex","setItem","stringify","deleteUser","userId","groups","getAllGroups","channels","getAllChannels","forEach","group","memberUserIds","filter","adminUserIds","channel","bannedUserIds","updatedUsers","success","promoteUserToGroupAdmin","groupId","getGroupById","error","roles","includes","push","updateGroup","g","getGroupsForUser","createGroup","name","ownerUserId","newGroup","Date","now","toString","channelIds","addMemberToGroup","removeMemberFromGroup","getChannelById","c","getChannelsForGroup","createChannel","existingChannel","newChannel","banUserFromChannel","channelId","isUserBannedFromChannel","factory","ɵfac","providedIn"],"sources":["/Users/keyaanhammadi/Desktop/SoftwareFrameworksA1/client/src/app/services/data.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { User, Group, Channel } from '../models';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataService {\n  private readonly USERS_KEY = 'app:users';\n  private readonly GROUPS_KEY = 'app:groups';\n  private readonly CHANNELS_KEY = 'app:channels';\n\n  // User management\n  getAllUsers(): User[] {\n    return JSON.parse(localStorage.getItem(this.USERS_KEY) || '[]');\n  }\n\n  getUserById(id: string): User | null {\n    const users = this.getAllUsers();\n    return users.find(u => u.id === id) || null;\n  }\n\n  updateUser(user: User): void {\n    const users = this.getAllUsers();\n    const index = users.findIndex(u => u.id === user.id);\n    if (index !== -1) {\n      users[index] = user;\n      localStorage.setItem(this.USERS_KEY, JSON.stringify(users));\n    }\n  }\n\n  deleteUser(userId: string): { success: boolean; error?: string } {\n    const users = this.getAllUsers();\n    const groups = this.getAllGroups();\n    const channels = this.getAllChannels();\n\n    // Remove user from all groups\n    groups.forEach(group => {\n      group.memberUserIds = group.memberUserIds.filter(id => id !== userId);\n      group.adminUserIds = group.adminUserIds.filter(id => id !== userId);\n    });\n\n    // Remove user from all channels (banned list)\n    channels.forEach(channel => {\n      channel.bannedUserIds = channel.bannedUserIds.filter(id => id !== userId);\n    });\n\n    // Remove user\n    const updatedUsers = users.filter(u => u.id !== userId);\n    \n    localStorage.setItem(this.USERS_KEY, JSON.stringify(updatedUsers));\n    localStorage.setItem(this.GROUPS_KEY, JSON.stringify(groups));\n    localStorage.setItem(this.CHANNELS_KEY, JSON.stringify(channels));\n\n    return { success: true };\n  }\n\n  promoteUserToGroupAdmin(userId: string, groupId: string): { success: boolean; error?: string } {\n    const user = this.getUserById(userId);\n    const group = this.getGroupById(groupId);\n    \n    if (!user) return { success: false, error: 'User not found' };\n    if (!group) return { success: false, error: 'Group not found' };\n\n    // Add groupAdmin role if not already present\n    if (!user.roles.includes('groupAdmin')) {\n      user.roles.push('groupAdmin');\n    }\n\n    // Add to group admins if not already\n    if (!group.adminUserIds.includes(userId)) {\n      group.adminUserIds.push(userId);\n    }\n\n    // Add to user's groups if not already\n    if (!user.groups.includes(groupId)) {\n      user.groups.push(groupId);\n    }\n\n    this.updateUser(user);\n    this.updateGroup(group);\n\n    return { success: true };\n  }\n\n  // Group management\n  getAllGroups(): Group[] {\n    return JSON.parse(localStorage.getItem(this.GROUPS_KEY) || '[]');\n  }\n\n  getGroupById(id: string): Group | null {\n    const groups = this.getAllGroups();\n    return groups.find(g => g.id === id) || null;\n  }\n\n  getGroupsForUser(userId: string): Group[] {\n    const groups = this.getAllGroups();\n    return groups.filter(g => g.memberUserIds.includes(userId));\n  }\n\n  createGroup(name: string, ownerUserId: string): { success: boolean; group?: Group; error?: string } {\n    const groups = this.getAllGroups();\n    \n    // Check for duplicate name\n    if (groups.find(g => g.name === name)) {\n      return { success: false, error: 'Group name already exists' };\n    }\n\n    const newGroup: Group = {\n      id: Date.now().toString(),\n      name,\n      ownerUserId,\n      adminUserIds: [ownerUserId],\n      memberUserIds: [ownerUserId],\n      channelIds: []\n    };\n\n    groups.push(newGroup);\n    localStorage.setItem(this.GROUPS_KEY, JSON.stringify(groups));\n\n    // Add group to user's groups\n    const user = this.getUserById(ownerUserId);\n    if (user) {\n      user.groups.push(newGroup.id);\n      this.updateUser(user);\n    }\n\n    return { success: true, group: newGroup };\n  }\n\n  updateGroup(group: Group): void {\n    const groups = this.getAllGroups();\n    const index = groups.findIndex(g => g.id === group.id);\n    if (index !== -1) {\n      groups[index] = group;\n      localStorage.setItem(this.GROUPS_KEY, JSON.stringify(groups));\n    }\n  }\n\n  addMemberToGroup(groupId: string, userId: string): { success: boolean; error?: string } {\n    const group = this.getGroupById(groupId);\n    const user = this.getUserById(userId);\n    \n    if (!group) return { success: false, error: 'Group not found' };\n    if (!user) return { success: false, error: 'User not found' };\n    if (group.memberUserIds.includes(userId)) {\n      return { success: false, error: 'User is already a member' };\n    }\n\n    group.memberUserIds.push(userId);\n    user.groups.push(groupId);\n    \n    this.updateGroup(group);\n    this.updateUser(user);\n\n    return { success: true };\n  }\n\n  removeMemberFromGroup(groupId: string, userId: string): { success: boolean; error?: string } {\n    const group = this.getGroupById(groupId);\n    const user = this.getUserById(userId);\n    \n    if (!group) return { success: false, error: 'Group not found' };\n    if (!user) return { success: false, error: 'User not found' };\n\n    group.memberUserIds = group.memberUserIds.filter(id => id !== userId);\n    group.adminUserIds = group.adminUserIds.filter(id => id !== userId);\n    user.groups = user.groups.filter(id => id !== groupId);\n    \n    this.updateGroup(group);\n    this.updateUser(user);\n\n    return { success: true };\n  }\n\n  // Channel management\n  getAllChannels(): Channel[] {\n    return JSON.parse(localStorage.getItem(this.CHANNELS_KEY) || '[]');\n  }\n\n  getChannelById(id: string): Channel | null {\n    const channels = this.getAllChannels();\n    return channels.find(c => c.id === id) || null;\n  }\n\n  getChannelsForGroup(groupId: string): Channel[] {\n    const channels = this.getAllChannels();\n    return channels.filter(c => c.groupId === groupId);\n  }\n\n  createChannel(groupId: string, name: string): { success: boolean; channel?: Channel; error?: string } {\n    const channels = this.getAllChannels();\n    const group = this.getGroupById(groupId);\n    \n    if (!group) return { success: false, error: 'Group not found' };\n\n    // Check for duplicate name within the group\n    const existingChannel = channels.find(c => c.groupId === groupId && c.name === name);\n    if (existingChannel) {\n      return { success: false, error: 'Channel name already exists in this group' };\n    }\n\n    const newChannel: Channel = {\n      id: Date.now().toString(),\n      groupId,\n      name,\n      bannedUserIds: []\n    };\n\n    channels.push(newChannel);\n    group.channelIds.push(newChannel.id);\n    \n    localStorage.setItem(this.CHANNELS_KEY, JSON.stringify(channels));\n    this.updateGroup(group);\n\n    return { success: true, channel: newChannel };\n  }\n\n  banUserFromChannel(channelId: string, userId: string): { success: boolean; error?: string } {\n    const channel = this.getChannelById(channelId);\n    \n    if (!channel) return { success: false, error: 'Channel not found' };\n    if (channel.bannedUserIds.includes(userId)) {\n      return { success: false, error: 'User is already banned from this channel' };\n    }\n\n    channel.bannedUserIds.push(userId);\n    const channels = this.getAllChannels();\n    const index = channels.findIndex(c => c.id === channelId);\n    if (index !== -1) {\n      channels[index] = channel;\n      localStorage.setItem(this.CHANNELS_KEY, JSON.stringify(channels));\n    }\n\n    return { success: true };\n  }\n\n  isUserBannedFromChannel(channelId: string, userId: string): boolean {\n    const channel = this.getChannelById(channelId);\n    return channel ? channel.bannedUserIds.includes(userId) : false;\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}